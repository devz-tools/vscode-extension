name: Publish to VSCode Marketplace

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string
      pre-release:
        description: 'Publish as pre-release'
        required: false
        default: false
        type: boolean
      dry-run:
        description: 'Dry run - build and package but do not publish'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build extension (includes type check, lint, CSS, LSP download)
        run: pnpm run package
        
      - name: Run tests
        run: pnpm test
          
      - name: Install vsce
        run: pnpm add -g @vscode/vsce
        
      - name: Package extension
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            if ("${{ github.event.inputs.version }}" -ne "") {
              pnpm run swap-readme:prepare
              vsce package ${{ github.event.inputs.version }} --no-dependencies
              pnpm run swap-readme:restore
              $vsixFile = "devz-tools-${{ github.event.inputs.version }}.vsix"
            } else {
              pnpm run vscode:package
              # Extract version from package.json to get VSIX filename
              $packageVersion = node -p "require('./package.json').version"
              $vsixFile = "devz-tools-$packageVersion.vsix"
            }
          } else {
            # For releases, extract version from tag
            $tagVersion = "${{ github.ref }}" -replace 'refs/tags/', '' -replace '^v', ''
            pnpm run swap-readme:prepare
            vsce package $tagVersion --no-dependencies
            pnpm run swap-readme:restore
            $vsixFile = "devz-tools-$tagVersion.vsix"
          }
          
          # Output VSIX filename for next steps
          echo "VSIX_FILE=$vsixFile" >> $env:GITHUB_ENV
          
          # Display package info
          Write-Host "ðŸ“¦ Package created: $vsixFile"
          Get-ChildItem *.vsix | Format-Table Name, Length
          
      - name: Publish to VSCode Marketplace
        if: ${{ github.event.inputs.dry-run != 'true' }}
        shell: pwsh
        env:
          VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            if ("${{ github.event.inputs.pre-release }}" -eq "true") {
              $preReleaseArg = "--pre-release"
            } else {
              $preReleaseArg = ""
            }
            
            Write-Host "ðŸš€ Publishing $env:VSIX_FILE..."
            vsce publish $preReleaseArg --packagePath $env:VSIX_FILE
          } else {
            # For releases, check if it's a pre-release
            if ("${{ github.event.release.prerelease }}" -eq "true") {
              Write-Host "ðŸš€ Publishing $env:VSIX_FILE as pre-release..."
              vsce publish --pre-release --packagePath $env:VSIX_FILE
            } else {
              Write-Host "ðŸš€ Publishing $env:VSIX_FILE..."
              vsce publish --packagePath $env:VSIX_FILE
            }
          }
          
      - name: Dry run summary
        if: ${{ github.event.inputs.dry-run == 'true' }}
        shell: pwsh
        run: |
          Write-Host "ðŸ§ª DRY RUN MODE - Package created but not published"
          Write-Host "ðŸ“¦ VSIX file: $env:VSIX_FILE"
          Write-Host ""
          Write-Host "Package details:"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $zip = [System.IO.Compression.ZipFile]::OpenRead($env:VSIX_FILE)
          $zip.Entries | Select-Object -First 20 | Format-Table FullName, Length
          $zip.Dispose()
          Write-Host "..."
          Write-Host ""
          Write-Host "To publish manually, run:"
          Write-Host "  vsce publish --packagePath $env:VSIX_FILE"
          
      - name: Upload VSIX as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: "*.vsix"
          retention-days: 30