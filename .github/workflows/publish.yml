name: Publish to VSCode Marketplace

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string
      pre-release:
        description: 'Publish as pre-release'
        required: false
        default: false
        type: boolean
      dry-run:
        description: 'Dry run - build and package but do not publish'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
        
      - name: Setup Rust with caching
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build extension (includes type check, lint, CSS, LSP)
        run: pnpm run package
        
      - name: Run tests
        run: |
          # Install vscode test dependencies
          sudo apt-get update
          sudo apt-get install -y libnss3 libatk-bridge2.0-0 libdrm2 libgtk-3-0 libgbm1
          
          # Run tests with xvfb for headless environment
          xvfb-run -a pnpm test
          
      - name: Install vsce
        run: pnpm add -g @vscode/vsce
        
      - name: Package extension
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.version }}" ]]; then
              pnpm run swap-readme:prepare
              vsce package ${{ github.event.inputs.version }} --no-dependencies
              pnpm run swap-readme:restore
              VSIX_FILE="devz-tools-${{ github.event.inputs.version }}.vsix"
            else
              pnpm run vscode:package
              # Extract version from package.json to get VSIX filename
              PACKAGE_VERSION=$(node -p "require('./package.json').version")
              VSIX_FILE="devz-tools-${PACKAGE_VERSION}.vsix"
            fi
          else
            # For releases, extract version from tag
            TAG_VERSION=${GITHUB_REF#refs/tags/}
            TAG_VERSION=${TAG_VERSION#v}
            pnpm run swap-readme:prepare
            vsce package $TAG_VERSION --no-dependencies
            pnpm run swap-readme:restore
            VSIX_FILE="devz-tools-${TAG_VERSION}.vsix"
          fi
          
          # Output VSIX filename for next steps
          echo "VSIX_FILE=${VSIX_FILE}" >> $GITHUB_ENV
          
          # Display package info
          echo "ðŸ“¦ Package created: ${VSIX_FILE}"
          ls -lh *.vsix
          
      - name: Publish to VSCode Marketplace
        if: ${{ github.event.inputs.dry-run != 'true' }}
        env:
          VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.pre-release }}" == "true" ]]; then
              PRE_RELEASE_ARG="--pre-release"
            else
              PRE_RELEASE_ARG=""
            fi
            
            echo "ðŸš€ Publishing ${VSIX_FILE}..."
            vsce publish $PRE_RELEASE_ARG --packagePath ${VSIX_FILE}
          else
            # For releases, check if it's a pre-release
            if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
              echo "ðŸš€ Publishing ${VSIX_FILE} as pre-release..."
              vsce publish --pre-release --packagePath ${VSIX_FILE}
            else
              echo "ðŸš€ Publishing ${VSIX_FILE}..."
              vsce publish --packagePath ${VSIX_FILE}
            fi
          fi
          
      - name: Dry run summary
        if: ${{ github.event.inputs.dry-run == 'true' }}
        run: |
          echo "ðŸ§ª DRY RUN MODE - Package created but not published"
          echo "ðŸ“¦ VSIX file: ${VSIX_FILE}"
          echo ""
          echo "Package details:"
          unzip -l ${VSIX_FILE} | head -20
          echo "..."
          echo ""
          echo "To publish manually, run:"
          echo "  vsce publish --packagePath ${VSIX_FILE}"
          
      - name: Upload VSIX as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: "*.vsix"
          retention-days: 30